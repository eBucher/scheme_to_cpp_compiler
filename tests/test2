# HOW TO ADD A NEW TEST:
# Add the .ss file to this folder and name it TeamLXP3.ss where X is the test number.
# Create a .cpp file named expectedX.cpp where X is the same test number. This is the file
# that the .cpp file produced by our program should match.

#Change the prefixes and suffixes to everything around the test number in the text files.
#Files should be named in the form of <prefix><test number><suffix>
outputPrefix=TeamL
outputSuffix=P3.cpp
expectedPrefix=expected
expectedSuffix=.cpp
sourcePrefix=TeamL
sourceSuffix=P3.ss

sourceFiles=($(ls $sourcePrefix*$sourceSuffix | sort -V))
numFiles=${#sourceFiles[@]}

#Colors for printing out text
RED='\033[0;31m'
GREEN='\033[0;32m'
NO_COLOR='\033[0m'

#Counts how many tests passed.
correctCount=0

#Get the P3 program
cp ../P3.out .

#Use the program on all of the sources
END=$((${numFiles}-1))
for i in $(seq 0 $END)
do
	./P3.out ${sourceFiles[i]} >> tempBashGarbage.txt
done

#Delete any of the extra stuff that the syntactical analyzer makes
#This line can be modified to keep stuff if needed.
rm -f *.o *.out *.lst *.dbg *.p1 *.p2 *.p3

#Change this if you want to change the file that the results are printed to.
resultsFile=testResults.txt

#Read all of the test files into arrays
outputFiles=($(ls $outputPrefix*$outputSuffix | sort -V))
expectedFiles=($(ls $expectedPrefix*$expectedSuffix | sort -V))

#Remove the old results file
rm -f $resultsFile

echo "Beginning " ${#outputFiles[@]} " tests..."
echo "Errors will be printed to" $resultsFile
echo ""

for i in $(seq 0 $END)
do
	#Get the test number from the output file name.
	testNum=$(echo -n ${outputFiles[i]} | sed -e "s/${outputPrefix}\(.*\)${outputSuffix}/\1/")

	#Make a copy of the source file
	cp ${sourceFiles[i]} test2TempSource.ss
	#Stick a call to (main) on the end of the source file
	echo "(main)" >> test2TempSource.ss
	#Copy the output from guile into a temporary file
	guile <  test2TempSource.ss | sed -e '1, 8d' >  test2GuileOutput
	#Compile the C++ code that was produced by our program
	g++ ${outputFiles[i]} Object.cpp -o test2TempOutFile.out 2> tempBashGarbage.txt
	
	if [ $? = 0 ]; then	#If the code compiled successfully.
		#Run the .out file and store the output in a temporary file
		./test2TempOutFile.out > test2CppOutput
		#Find the differences between the guile and c++ outputs
		diff -EZBbwq test2GuileOutput test2CppOutput > tempBashGarbage.txt

		if [ $? = 0 ]; then #Checks the error code produced by the diff command
			STATUS_COLOR=${GREEN}
			STATUS_TEXT="PASSED"
			STATUS_TEXT2=""
			correctCount=$((${correctCount}+1))
		else
			STATUS_COLOR=${RED}
			STATUS_TEXT="FAILED"
			STATUS_TEXT2="The Guile output did not match the C++ output."
			echo "------Differences for Test" ${testNum} "------" >> $resultsFile
			echo "Lines preceded by < are from " ${sourceFiles[i]} >> $resultsFile
			echo "Lines preceded by > are from " ${outputFiles[i]} >> $resultsFile
			echo "" >> $resultsFile
	
			diff -EZbBw test2GuileOutput test2CppOutput >> $resultsFile
	
			echo "------End of differences for Test " ${testNum} "------">> $resultsFile
			echo "" >> $resultsFile
			echo "" >> $resultsFile
			echo "" >> $resultsFile
			echo "" >> $resultsFile
			echo "" >> $resultsFile
		fi
	else
		STATUS_COLOR=${RED}
		STATUS_TEXT="FAILED"
		STATUS_TEXT2="The C++ code did not compile."
	fi

	#Print out the success/error box
	printf "${STATUS_COLOR}[===============]${NO_COLOR}\n"
	printf "${STATUS_COLOR}[     Test ${testNum}\t] ${NO_COLOR}${STATUS_TEXT2}\n"
	printf "${STATUS_COLOR}[     ${STATUS_TEXT}\t] ${NO_COLOR}$\n"
	printf "${STATUS_COLOR}[===============]${NO_COLOR}\n\n"

done

echo ""
echo "Finished running tests."

if [ "$correctCount" = "$numFiles" ]
then
	printf "${GREEN}"
	printf "      _\n"
	printf "     /(|\n"
	printf "    (  :\n"
	printf "   __\  \  _____\n"
	printf "  (____)  '|         All ${correctCount}/${numFiles} tests passed.\n"
	printf " (____)|   |\n"
	printf "  (____).__|\n"
	printf "   (___)__.|_____\n"
	printf "${NO_COLOR}"
else
	printf "${RED}"
	printf "${correctCount}/${numFiles} tests passed.\n\n"
	printf "${NO_COLOR}"
fi

#Remove extra temporary files
rm tempBashGarbage.txt
rm test2CppOutput
rm test2GuileOutput
rm test2TempOutFile.out
rm test2Temp*
